##################################################
# file: NumbexServiceService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py NumbexServiceService.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from NumbexServiceService_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
getData = GED("http://numbex/", "getData").pyclass

getDataResponse = GED("http://numbex/", "getDataResponse").pyclass

getUnsigned = GED("http://numbex/", "getUnsigned").pyclass

getUnsignedResponse = GED("http://numbex/", "getUnsignedResponse").pyclass

getUpdates = GED("http://numbex/", "getUpdates").pyclass

getUpdatesResponse = GED("http://numbex/", "getUpdatesResponse").pyclass

receiveUpdates = GED("http://numbex/", "receiveUpdates").pyclass

receiveUpdatesResponse = GED("http://numbex/", "receiveUpdatesResponse").pyclass

getPublicKeys = GED("http://numbex/", "getPublicKeys").pyclass

getPublicKeysResponse = GED("http://numbex/", "getPublicKeysResponse").pyclass

receivePublicKey = GED("http://numbex/", "receivePublicKey").pyclass

receivePublicKeyResponse = GED("http://numbex/", "receivePublicKeyResponse").pyclass

removePublicKey = GED("http://numbex/", "removePublicKey").pyclass

removePublicKeyResponse = GED("http://numbex/", "removePublicKeyResponse").pyclass


# Service Skeletons
class NumbexServiceService(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_getData(self, ps, **kw):
        request = ps.Parse(getData.typecode)
        return request,getDataResponse()

    soapAction['getData'] = 'soap_getData'
    root[(getData.typecode.nspname,getData.typecode.pname)] = 'soap_getData'

    def soap_getUnsigned(self, ps, **kw):
        request = ps.Parse(getUnsigned.typecode)
        return request,getUnsignedResponse()

    soapAction['getUnsigned'] = 'soap_getUnsigned'
    root[(getUnsigned.typecode.nspname,getUnsigned.typecode.pname)] = 'soap_getUnsigned'

    def soap_getUpdates(self, ps, **kw):
        request = ps.Parse(getUpdates.typecode)
        return request,getUpdatesResponse()

    soapAction['getUpdates'] = 'soap_getUpdates'
    root[(getUpdates.typecode.nspname,getUpdates.typecode.pname)] = 'soap_getUpdates'

    def soap_receiveUpdates(self, ps, **kw):
        request = ps.Parse(receiveUpdates.typecode)
        return request,receiveUpdatesResponse()

    soapAction['receiveUpdates'] = 'soap_receiveUpdates'
    root[(receiveUpdates.typecode.nspname,receiveUpdates.typecode.pname)] = 'soap_receiveUpdates'

    def soap_getPublicKeys(self, ps, **kw):
        request = ps.Parse(getPublicKeys.typecode)
        return request,getPublicKeysResponse()

    soapAction['getPublicKeys'] = 'soap_getPublicKeys'
    root[(getPublicKeys.typecode.nspname,getPublicKeys.typecode.pname)] = 'soap_getPublicKeys'

    def soap_receivePublicKey(self, ps, **kw):
        request = ps.Parse(receivePublicKey.typecode)
        return request,receivePublicKeyResponse()

    soapAction['receivePublicKey'] = 'soap_receivePublicKey'
    root[(receivePublicKey.typecode.nspname,receivePublicKey.typecode.pname)] = 'soap_receivePublicKey'

    def soap_removePublicKey(self, ps, **kw):
        request = ps.Parse(removePublicKey.typecode)
        return request,removePublicKeyResponse()

    soapAction['removePublicKey'] = 'soap_removePublicKey'
    root[(removePublicKey.typecode.nspname,removePublicKey.typecode.pname)] = 'soap_removePublicKey'

