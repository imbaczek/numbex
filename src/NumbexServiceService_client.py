##################################################
# file: NumbexServiceService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py NumbexServiceService.wsdl
# 
##################################################

from NumbexServiceService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class NumbexServiceServiceLocator:
    NumbexServicePort_address = "http://localhost:8000/"
    def getNumbexServicePortAddress(self):
        return NumbexServiceServiceLocator.NumbexServicePort_address
    def getNumbexServicePort(self, url=None, **kw):
        return NumbexServicePortBindingSOAP(url or NumbexServiceServiceLocator.NumbexServicePort_address, **kw)

# Methods
class NumbexServicePortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getData
    def getData(self, request, **kw):
        if isinstance(request, getData) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getData", **kw)
        # no output wsaction
        response = self.binding.Receive(getDataResponse.typecode)
        return response

    # op: getUnsigned
    def getUnsigned(self, request, **kw):
        if isinstance(request, getUnsigned) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getUnsigned", **kw)
        # no output wsaction
        response = self.binding.Receive(getUnsignedResponse.typecode)
        return response

    # op: getUpdates
    def getUpdates(self, request, **kw):
        if isinstance(request, getUpdates) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getUpdates", **kw)
        # no output wsaction
        response = self.binding.Receive(getUpdatesResponse.typecode)
        return response

    # op: receiveUpdates
    def receiveUpdates(self, request, **kw):
        if isinstance(request, receiveUpdates) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="receiveUpdates", **kw)
        # no output wsaction
        response = self.binding.Receive(receiveUpdatesResponse.typecode)
        return response

    # op: getPublicKeys
    def getPublicKeys(self, request, **kw):
        if isinstance(request, getPublicKeys) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="getPublicKeys", **kw)
        # no output wsaction
        response = self.binding.Receive(getPublicKeysResponse.typecode)
        return response

    # op: receivePublicKey
    def receivePublicKey(self, request, **kw):
        if isinstance(request, receivePublicKey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="receivePublicKey", **kw)
        # no output wsaction
        response = self.binding.Receive(receivePublicKeyResponse.typecode)
        return response

    # op: removePublicKey
    def removePublicKey(self, request, **kw):
        if isinstance(request, removePublicKey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="removePublicKey", **kw)
        # no output wsaction
        response = self.binding.Receive(removePublicKeyResponse.typecode)
        return response

getData = GED("http://numbex/", "getData").pyclass

getDataResponse = GED("http://numbex/", "getDataResponse").pyclass

getUnsigned = GED("http://numbex/", "getUnsigned").pyclass

getUnsignedResponse = GED("http://numbex/", "getUnsignedResponse").pyclass

getUpdates = GED("http://numbex/", "getUpdates").pyclass

getUpdatesResponse = GED("http://numbex/", "getUpdatesResponse").pyclass

receiveUpdates = GED("http://numbex/", "receiveUpdates").pyclass

receiveUpdatesResponse = GED("http://numbex/", "receiveUpdatesResponse").pyclass

getPublicKeys = GED("http://numbex/", "getPublicKeys").pyclass

getPublicKeysResponse = GED("http://numbex/", "getPublicKeysResponse").pyclass

receivePublicKey = GED("http://numbex/", "receivePublicKey").pyclass

receivePublicKeyResponse = GED("http://numbex/", "receivePublicKeyResponse").pyclass

removePublicKey = GED("http://numbex/", "removePublicKey").pyclass

removePublicKeyResponse = GED("http://numbex/", "removePublicKeyResponse").pyclass
