##################################################
# file: NumbexServiceService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py NumbexServiceService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://numbex/
##############################

class ns0:
    targetNamespace = "http://numbex/"

    class getData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getData_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getData_Holder"
            self.pyclass = Holder

    class getDataResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getDataResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDataResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getDataResponse_Holder"
            self.pyclass = Holder

    class receiveUpdates_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "receiveUpdates")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.receiveUpdates_Def.schema
            TClist = [ZSI.TC.String(pname="csv", aname="_csv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._csv = None
                    return
            Holder.__name__ = "receiveUpdates_Holder"
            self.pyclass = Holder

    class receiveUpdatesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "receiveUpdatesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.receiveUpdatesResponse_Def.schema
            TClist = [ZSI.TC.Boolean(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "receiveUpdatesResponse_Holder"
            self.pyclass = Holder

    class getUpdates_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getUpdates")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUpdates_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="parameter", aname="_parameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parameter = None
                    return
            Holder.__name__ = "getUpdates_Holder"
            self.pyclass = Holder

    class getUpdatesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getUpdatesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUpdatesResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getUpdatesResponse_Holder"
            self.pyclass = Holder

    class getUnsigned_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getUnsigned")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUnsigned_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getUnsigned_Holder"
            self.pyclass = Holder

    class getUnsignedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getUnsignedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getUnsignedResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getUnsignedResponse_Holder"
            self.pyclass = Holder

    class getPublicKeys_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getPublicKeys")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPublicKeys_Def.schema
            TClist = [ZSI.TC.String(pname="parameter", aname="_parameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parameter = None
                    return
            Holder.__name__ = "getPublicKeys_Holder"
            self.pyclass = Holder

    class getPublicKeysResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "getPublicKeysResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPublicKeysResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getPublicKeysResponse_Holder"
            self.pyclass = Holder

    class receivePublicKey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "receivePublicKey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.receivePublicKey_Def.schema
            TClist = [ZSI.TC.String(pname="owner", aname="_owner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pubkey", aname="_pubkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._owner = None
                    self._pubkey = None
                    return
            Holder.__name__ = "receivePublicKey_Holder"
            self.pyclass = Holder

    class receivePublicKeyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "receivePublicKeyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.receivePublicKeyResponse_Def.schema
            TClist = [ZSI.TC.Boolean(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "receivePublicKeyResponse_Holder"
            self.pyclass = Holder

    class removePublicKey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "removePublicKey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removePublicKey_Def.schema
            TClist = [ZSI.TC.String(pname="parameter", aname="_parameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parameter = None
                    return
            Holder.__name__ = "removePublicKey_Holder"
            self.pyclass = Holder

    class removePublicKeyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://numbex/"
        type = (schema, "removePublicKeyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removePublicKeyResponse_Def.schema
            TClist = [ZSI.TC.Boolean(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "removePublicKeyResponse_Holder"
            self.pyclass = Holder

    class getData_Dec(ElementDeclaration):
        literal = "getData"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getData")
            kw["aname"] = "_getData"
            if ns0.getData_Def not in ns0.getData_Dec.__bases__:
                bases = list(ns0.getData_Dec.__bases__)
                bases.insert(0, ns0.getData_Def)
                ns0.getData_Dec.__bases__ = tuple(bases)

            ns0.getData_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getData_Dec_Holder"

    class getDataResponse_Dec(ElementDeclaration):
        literal = "getDataResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getDataResponse")
            kw["aname"] = "_getDataResponse"
            if ns0.getDataResponse_Def not in ns0.getDataResponse_Dec.__bases__:
                bases = list(ns0.getDataResponse_Dec.__bases__)
                bases.insert(0, ns0.getDataResponse_Def)
                ns0.getDataResponse_Dec.__bases__ = tuple(bases)

            ns0.getDataResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDataResponse_Dec_Holder"

    class getUpdates_Dec(ElementDeclaration):
        literal = "getUpdates"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getUpdates")
            kw["aname"] = "_getUpdates"
            if ns0.getUpdates_Def not in ns0.getUpdates_Dec.__bases__:
                bases = list(ns0.getUpdates_Dec.__bases__)
                bases.insert(0, ns0.getUpdates_Def)
                ns0.getUpdates_Dec.__bases__ = tuple(bases)

            ns0.getUpdates_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUpdates_Dec_Holder"

    class getUpdatesResponse_Dec(ElementDeclaration):
        literal = "getUpdatesResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getUpdatesResponse")
            kw["aname"] = "_getUpdatesResponse"
            if ns0.getUpdatesResponse_Def not in ns0.getUpdatesResponse_Dec.__bases__:
                bases = list(ns0.getUpdatesResponse_Dec.__bases__)
                bases.insert(0, ns0.getUpdatesResponse_Def)
                ns0.getUpdatesResponse_Dec.__bases__ = tuple(bases)

            ns0.getUpdatesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUpdatesResponse_Dec_Holder"

    class getUnsigned_Dec(ElementDeclaration):
        literal = "getUnsigned"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getUnsigned")
            kw["aname"] = "_getUnsigned"
            if ns0.getData_Def not in ns0.getUnsigned_Dec.__bases__:
                bases = list(ns0.getUnsigned_Dec.__bases__)
                bases.insert(0, ns0.getData_Def)
                ns0.getUnsigned_Dec.__bases__ = tuple(bases)

            ns0.getData_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUnsigned_Dec_Holder"

    class getUnsignedResponse_Dec(ElementDeclaration):
        literal = "getUnsignedResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getUnsignedResponse")
            kw["aname"] = "_getUnsignedResponse"
            if ns0.getDataResponse_Def not in ns0.getUnsignedResponse_Dec.__bases__:
                bases = list(ns0.getUnsignedResponse_Dec.__bases__)
                bases.insert(0, ns0.getDataResponse_Def)
                ns0.getUnsignedResponse_Dec.__bases__ = tuple(bases)

            ns0.getDataResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getUnsignedResponse_Dec_Holder"

    class receiveUpdates_Dec(ElementDeclaration):
        literal = "receiveUpdates"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","receiveUpdates")
            kw["aname"] = "_receiveUpdates"
            if ns0.receiveUpdates_Def not in ns0.receiveUpdates_Dec.__bases__:
                bases = list(ns0.receiveUpdates_Dec.__bases__)
                bases.insert(0, ns0.receiveUpdates_Def)
                ns0.receiveUpdates_Dec.__bases__ = tuple(bases)

            ns0.receiveUpdates_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "receiveUpdates_Dec_Holder"

    class receiveUpdatesResponse_Dec(ElementDeclaration):
        literal = "receiveUpdatesResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","receiveUpdatesResponse")
            kw["aname"] = "_receiveUpdatesResponse"
            if ns0.receiveUpdatesResponse_Def not in ns0.receiveUpdatesResponse_Dec.__bases__:
                bases = list(ns0.receiveUpdatesResponse_Dec.__bases__)
                bases.insert(0, ns0.receiveUpdatesResponse_Def)
                ns0.receiveUpdatesResponse_Dec.__bases__ = tuple(bases)

            ns0.receiveUpdatesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "receiveUpdatesResponse_Dec_Holder"

    class getPublicKeys_Dec(ElementDeclaration):
        literal = "getPublicKeys"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getPublicKeys")
            kw["aname"] = "_getPublicKeys"
            if ns0.getPublicKeys_Def not in ns0.getPublicKeys_Dec.__bases__:
                bases = list(ns0.getPublicKeys_Dec.__bases__)
                bases.insert(0, ns0.getPublicKeys_Def)
                ns0.getPublicKeys_Dec.__bases__ = tuple(bases)

            ns0.getPublicKeys_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPublicKeys_Dec_Holder"

    class getPublicKeysResponse_Dec(ElementDeclaration):
        literal = "getPublicKeysResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","getPublicKeysResponse")
            kw["aname"] = "_getPublicKeysResponse"
            if ns0.getPublicKeysResponse_Def not in ns0.getPublicKeysResponse_Dec.__bases__:
                bases = list(ns0.getPublicKeysResponse_Dec.__bases__)
                bases.insert(0, ns0.getPublicKeysResponse_Def)
                ns0.getPublicKeysResponse_Dec.__bases__ = tuple(bases)

            ns0.getPublicKeysResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPublicKeysResponse_Dec_Holder"

    class receivePublicKey_Dec(ElementDeclaration):
        literal = "receivePublicKey"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","receivePublicKey")
            kw["aname"] = "_receivePublicKey"
            if ns0.receivePublicKey_Def not in ns0.receivePublicKey_Dec.__bases__:
                bases = list(ns0.receivePublicKey_Dec.__bases__)
                bases.insert(0, ns0.receivePublicKey_Def)
                ns0.receivePublicKey_Dec.__bases__ = tuple(bases)

            ns0.receivePublicKey_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "receivePublicKey_Dec_Holder"

    class receivePublicKeyResponse_Dec(ElementDeclaration):
        literal = "receivePublicKeyResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","receivePublicKeyResponse")
            kw["aname"] = "_receivePublicKeyResponse"
            if ns0.receivePublicKeyResponse_Def not in ns0.receivePublicKeyResponse_Dec.__bases__:
                bases = list(ns0.receivePublicKeyResponse_Dec.__bases__)
                bases.insert(0, ns0.receivePublicKeyResponse_Def)
                ns0.receivePublicKeyResponse_Dec.__bases__ = tuple(bases)

            ns0.receivePublicKeyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "receivePublicKeyResponse_Dec_Holder"

    class removePublicKey_Dec(ElementDeclaration):
        literal = "removePublicKey"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","removePublicKey")
            kw["aname"] = "_removePublicKey"
            if ns0.removePublicKey_Def not in ns0.removePublicKey_Dec.__bases__:
                bases = list(ns0.removePublicKey_Dec.__bases__)
                bases.insert(0, ns0.removePublicKey_Def)
                ns0.removePublicKey_Dec.__bases__ = tuple(bases)

            ns0.removePublicKey_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removePublicKey_Dec_Holder"

    class removePublicKeyResponse_Dec(ElementDeclaration):
        literal = "removePublicKeyResponse"
        schema = "http://numbex/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://numbex/","removePublicKeyResponse")
            kw["aname"] = "_removePublicKeyResponse"
            if ns0.removePublicKeyResponse_Def not in ns0.removePublicKeyResponse_Dec.__bases__:
                bases = list(ns0.removePublicKeyResponse_Dec.__bases__)
                bases.insert(0, ns0.removePublicKeyResponse_Def)
                ns0.removePublicKeyResponse_Dec.__bases__ = tuple(bases)

            ns0.removePublicKeyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removePublicKeyResponse_Dec_Holder"

# end class ns0 (tns: http://numbex/)
