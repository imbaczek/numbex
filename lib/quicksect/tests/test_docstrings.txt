Feature
=======
=======

    Basic feature, with required integer start and stop properties.
    Also accpets optional strand as +1 or -1 (used for up/downstream queries),
    a name, and any arbitrary data is sent in on the info keyword argument

    >>> from intersection import Feature

    >>> f1 = Feature(23, 36)
    >>> f2 = Feature(34, 48, strand=-1, name="fred", info={'chr':12, 'anno':'transposon'})
    >>> f2
    Feature(34, 48, strand=-1, name="fred", {'anno': 'transposon', 'chr': 12})


distance
========
========

    Distance between 2 features. The integer result is always positive or zero. 
    If the features overlap or touch, it is zero.
    >>> from intersection import Feature, distance
    >>> distance(Feature(1, 2), Feature(12, 13))
    10
    >>> distance(Feature(1, 2), Feature(2, 3))
    0
    >>> distance(Feature(1, 100), Feature(20, 30))
    0


Intersecter
===========
===========

    Data structure for performing intersect and neighbor queries on a 
    set of intervals. Algorithm uses simple binary search along with
    knowledge of the longest interval to perform efficient queries. 

    Usage
    =====
    >>> from intersection import Intersecter, Feature
    >>> intersecter = Intersecter()

    Add intervals, the only requirement is that the interval have integer
    start and end attributes. Optional arguments are strand, name, and info.

    >>> Feature(1, 22, strand=-1, name="fred", info={'chr':12, 'anno': 'anything'})
    Feature(1, 22, strand=-1, name="fred", {'anno': 'anything', 'chr': 12})


    >>> intersecter.add_interval(Feature(0, 10, -1))
    >>> intersecter.add_interval(Feature(3, 7, 1))
    >>> intersecter.add_interval(Feature(3, 40, -1))
    >>> intersecter.add_interval(Feature(13, 50, 1))

    Queries
    -------

    find
    ++++

    >>> intersecter.find(2, 5)
    [Feature(0, 10, strand=-1), Feature(3, 7, strand=1), Feature(3, 40, strand=-1)]
    >>> intersecter.find(11, 100)
    [Feature(3, 40, strand=-1), Feature(13, 50, strand=1)]
    >>> intersecter.find(100, 200)
    []

    left/right
    ++++++++++
    the left method finds features that are strictly to the left of
    the query feature. overlapping features are not considered:

    >>> intersecter.left(Feature(0, 1))
    []
    >>> intersecter.left(Feature(11, 12))
    [Feature(0, 10, strand=-1)]


    up/downstream
    +++++++++++++
    up/downstream method behave exactly like left/right, except that
    the direction is determined by the strand of the query feature. 
    If the strand is 1, then upstream is left, downstream is right.

    If the strand is -1, then upstream is right, downstream is left.
    >>> intersecter.upstream(Feature(11, 12, strand=1))
    [Feature(0, 10, strand=-1)]
    >>> intersecter.upstream(Feature(11, 12, strand=-1))
    [Feature(13, 50, strand=1)]

    all of these method take an argument 'n' for the number of results desired.
    >>> intersecter.upstream(Feature(1, 2, strand=-1), n=3)
    [Feature(3, 7, strand=1), Feature(3, 40, strand=-1), Feature(13, 50, strand=1)]
    
    nearest neighbors
    +++++++++++++++++
    >>> intersecter.nearest_neighbors(Feature(1, 2))
    [Feature(0, 10, strand=-1)]

    >>> intersecter.nearest_neighbors(Feature(1, 2), n=2)
    [Feature(0, 10, strand=-1), Feature(3, 7, strand=1)]
